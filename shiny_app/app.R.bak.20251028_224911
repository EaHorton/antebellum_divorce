library(shiny)library(shiny)library(shiny)

library(DBI)

library(RSQLite)library(DBI)library(DBI)

library(DT)

library(sf)library(RSQLite)library(RSQLite)

library(leaflet)

library(leaflet.extras)library(DT)library(DT)

library(viridis)

library(bslib)library(sf)library(sf)



# Path to the SQLite DB and boundary data (relative to repo root)library(leaflet)library(leaflet)

db_path <- file.path('..', 'dv_petitions.db')

states_geojson <- file.path('..', 'data', 'boundaries', 'states_1860.geojson')library(leaflet.extras)library(leaflet.extras)



# Custom theme settingslibrary(viridis)library(viridis)

custom_theme <- bs_theme(

  version = 5,library(bslib)library(bslib)

  bootswatch = "lumen",

  primary = "#2c3e50",

  secondary = "#95a5a6",

  success = "#18bc9c",# Path to the SQLite DB and boundary data (relative to repo root)# Path to the SQLite DB and boundary data (relative to repo root)

  info = "#3498db",

  warning = "#f39c12",db_path <- file.path('..', 'dv_petitions.db')db_path <- file.path('..', 'dv_petitions.db')

  danger = "#e74c3c",

  base_font = "Source Sans Pro",states_geojson <- file.path('..', 'data', 'boundaries', 'states_1860.geojson')states_geojson <- file.path('..', 'data', 'boundaries', 'states_1860.geojson')

  heading_font = "Playfair Display",

  font_scale = 1.0

)

# Custom theme settings# Custom theme settings

# UI

ui <- fluidPage(custom_theme <- bs_theme(custom_theme <- bs_theme(

  theme = custom_theme,

  tags$head(  version = 5,  version = 5,

    tags$link(

      href = "https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Source+Sans+Pro:wght@400;600&display=swap",  bootswatch = "lumen",  bootswatch = "lumen",

      rel = "stylesheet"

    ),  primary = "#2c3e50",  primary = "#2c3e50",

    tags$style("

      body {  secondary = "#95a5a6",  secondary = "#95a5a6",

        background-color: #f8f9fa;

        color: #2c3e50;  success = "#18bc9c",  success = "#18bc9c",

      }

      .container-fluid {  info = "#3498db",  info = "#3498db",

        max-width: 1400px;

        margin: 0 auto;  warning = "#f39c12",  warning = "#f39c12",

        padding: 2rem;

      }  danger = "#e74c3c",  danger = "#e74c3c",

      .title-panel {

        font-family: 'Playfair Display', serif;  base_font = "Source Sans Pro",  base_font = "Source Sans Pro",

        font-size: 3rem;

        font-weight: 700;  heading_font = "Playfair Display",  heading_font = "Playfair Display",

        text-align: center;

        margin: 2rem 0 3rem;  font_scale = 1.0  font_scale = 1.0

        color: #2c3e50;

        border-bottom: 3px solid #18bc9c;))

        padding-bottom: 1rem;

      }

      .well, .card {

        background-color: #ffffff;# UI# UI

        border: none;

        border-radius: 8px;ui <- fluidPage(ui <- fluidPage(

        box-shadow: 0 2px 4px rgba(0,0,0,0.1);

        padding: 1.5rem;  theme = custom_theme,  theme = custom_theme,

        margin-bottom: 1.5rem;

      }  tags$head(  tags$head(

      .tab-content {

        background-color: #ffffff;    tags$link(    tags$link(

        padding: 1.5rem;

        border-radius: 8px;      href = "https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Source+Sans+Pro:wght@400;600&display=swap",      href = "https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Source+Sans+Pro:wght@400;600&display=swap",

        box-shadow: 0 2px 4px rgba(0,0,0,0.1);

      }      rel = "stylesheet"      rel = "stylesheet"

      .nav-tabs {

        border-bottom: 2px solid #e9ecef;    ),    ),

        margin-bottom: 1rem;

      }    tags$style("    tags$style("

      .nav-tabs .nav-link {

        color: #6c757d;      body {      body {

        border: none;

        padding: 1rem 1.5rem;        background-color: #f8f9fa;        background-color: #f8f9fa;

        font-weight: 600;

        transition: all 0.3s ease;        color: #2c3e50;        color: #2c3e50;

      }

      .nav-tabs .nav-link.active {      }      }

        color: #18bc9c;

        border-bottom: 3px solid #18bc9c;      .container-fluid {      .container-fluid {

        background: none;

      }        max-width: 1400px;        max-width: 1400px;

      .nav-tabs .nav-link:hover {

        color: #18bc9c;        margin: 0 auto;        margin: 0 auto;

        border-bottom: 3px solid #18bc9c;

        background: none;        padding: 2rem;        padding: 2rem;

      }

      .form-group {      }      }

        margin-bottom: 1.5rem;

      }      .title-panel {      .title-panel {

      .form-label {

        font-weight: 600;        font-family: 'Playfair Display', serif;        font-family: 'Playfair Display', serif;

        color: #2c3e50;

        margin-bottom: 0.5rem;        font-size: 3rem;        font-size: 3rem;

      }

      .form-control {        font-weight: 700;        font-weight: 700;

        border-radius: 6px;

        border: 1px solid #e9ecef;        text-align: center;        text-align: center;

        padding: 0.5rem 1rem;

      }        margin: 2rem 0 3rem;        margin: 2rem 0 3rem;

      .btn {

        border-radius: 6px;        color: #2c3e50;        color: #2c3e50;

        padding: 0.5rem 1.25rem;

        font-weight: 600;        border-bottom: 3px solid #18bc9c;        border-bottom: 3px solid #18bc9c;

        transition: all 0.3s ease;

      }        padding-bottom: 1rem;        padding-bottom: 1rem;

      .btn-primary {

        background-color: #18bc9c;      }      }

        border-color: #18bc9c;

      }      .well, .card {      .well, .card {

      .btn-primary:hover {

        background-color: #159a80;        background-color: #ffffff;        background-color: #ffffff;

        border-color: #159a80;

      }        border: none;        border: none;

      .results-panel {

        margin-top: 2rem;        border-radius: 8px;        border-radius: 8px;

        padding: 1.5rem;

        border-radius: 8px;        box-shadow: 0 2px 4px rgba(0,0,0,0.1);        box-shadow: 0 2px 4px rgba(0,0,0,0.1);

        background-color: #ffffff;

        box-shadow: 0 2px 4px rgba(0,0,0,0.1);        padding: 1.5rem;        padding: 1.5rem;

      }

      .results-panel h3 {        margin-bottom: 1.5rem;        margin-bottom: 1.5rem;

        color: #2c3e50;

        margin-bottom: 1.5rem;      }      }

      }

      #download_filtered_csv {      .tab-content {      .tab-content {

        margin-top: 1rem;

      }        background-color: #ffffff;        background-color: #ffffff;

      /* Leaflet custom styles */

      .leaflet-container {        padding: 1.5rem;        padding: 1.5rem;

        border-radius: 8px;

        box-shadow: 0 2px 4px rgba(0,0,0,0.1);        border-radius: 8px;        border-radius: 8px;

      }

      .leaflet-popup-content {        box-shadow: 0 2px 4px rgba(0,0,0,0.1);        box-shadow: 0 2px 4px rgba(0,0,0,0.1);

        font-family: 'Source Sans Pro', sans-serif;

        font-size: 14px;      }      }

        line-height: 1.6;

      }      .nav-tabs {      .nav-tabs {

      .leaflet-popup-content b {

        color: #2c3e50;        border-bottom: 2px solid #e9ecef;        border-bottom: 2px solid #e9ecef;

      }

      /* DataTable custom styles */        margin-bottom: 1rem;        margin-bottom: 1rem;

      .dataTables_wrapper {

        padding: 1rem;      }      }

        border-radius: 8px;

        background-color: #ffffff;      .nav-tabs .nav-link {      .nav-tabs .nav-link {

      }

      .dataTables_info, .dataTables_length, .dataTables_filter {        color: #6c757d;        color: #6c757d;

        font-size: 0.9rem;

        color: #6c757d;        border: none;        border: none;

      }

      table.dataTable thead th {        padding: 1rem 1.5rem;        padding: 1rem 1.5rem;

        background-color: #f8f9fa;

        color: #2c3e50;        font-weight: 600;        font-weight: 600;

        font-weight: 600;

        border-bottom: 2px solid #e9ecef;        transition: all 0.3s ease;        transition: all 0.3s ease;

      }

      table.dataTable tbody td {      }      }

        padding: 0.75rem;

        vertical-align: middle;      .nav-tabs .nav-link.active {      .nav-tabs .nav-link.active {

      }

      /* Custom slider styles */        color: #18bc9c;        color: #18bc9c;

      .irs--shiny .irs-bar {

        background: #18bc9c;        border-bottom: 3px solid #18bc9c;        border-bottom: 3px solid #18bc9c;

      }

      .irs--shiny .irs-from, .irs--shiny .irs-to, .irs--shiny .irs-single {        background: none;        background: none;

        background-color: #18bc9c;

      }      }      }

      .irs--shiny .irs-handle {

        border-color: #18bc9c;      .nav-tabs .nav-link:hover {      .nav-tabs .nav-link:hover {

      }

    ")        color: #18bc9c;        color: #18bc9c;

  ),

          border-bottom: 3px solid #18bc9c;        border-bottom: 3px solid #18bc9c;

  tags$div(class = "title-panel", "Antebellum Divorce Petitions Database"),

          background: none;        background: none;

  sidebarLayout(

    sidebarPanel(      }      }

      div(class = "card",

          h4("Filter Options", class = "mb-4", style = "color: #2c3e50; border-bottom: 2px solid #18bc9c; padding-bottom: 0.5rem;"),      .form-group {      .form-group {

          # Filter controls

          checkboxGroupInput('active_filters', 'Select Filters to Apply:',        margin-bottom: 1.5rem;        margin-bottom: 1.5rem;

                          choices = c(

                            'Reasoning' = 'reasoning',      }      }

                            'Party Accused' = 'party',

                            'Court Type' = 'court',      .form-label {      .form-label {

                            'Result' = 'result'

                          )),        font-weight: 600;        font-weight: 600;

          

          conditionalPanel(        color: #2c3e50;        color: #2c3e50;

            condition = "input.active_filters.includes('reasoning')",

            selectizeInput('reasoning_type', 'Reasoning Category',        margin-bottom: 0.5rem;        margin-bottom: 0.5rem;

                       choices = c('All' = 'all'),

                       multiple = TRUE,      }      }

                       options = list(

                         placeholder = 'Select reasons',      .form-control {      .form-control {

                         plugins = list('remove_button')

                       ))        border-radius: 6px;        border-radius: 6px;

          ),

                  border: 1px solid #e9ecef;        border: 1px solid #e9ecef;

          conditionalPanel(

            condition = "input.active_filters.includes('party')",        padding: 0.5rem 1rem;        padding: 0.5rem 1rem;

            selectInput('party_type', 'Party Accused',

                       choices = c(      }      }

                         'Husband Accused' = 'husband_accused',

                         'Wife Accused' = 'wife_accused'      .btn {      .btn {

                       ))

          ),        border-radius: 6px;        border-radius: 6px;

          

          conditionalPanel(        padding: 0.5rem 1.25rem;        padding: 0.5rem 1.25rem;

            condition = "input.active_filters.includes('court')",

            selectizeInput('court_type', 'Court Type',        font-weight: 600;        font-weight: 600;

                       choices = c('All' = 'all'),

                       multiple = TRUE,        transition: all 0.3s ease;        transition: all 0.3s ease;

                       options = list(

                         placeholder = 'Select courts',      }      }

                         plugins = list('remove_button')

                       ))      .btn-primary {      .btn-primary {

          ),

                  background-color: #18bc9c;        background-color: #18bc9c;

          conditionalPanel(

            condition = "input.active_filters.includes('result')",        border-color: #18bc9c;        border-color: #18bc9c;

            selectizeInput('result_type', 'Petition Result',

                       choices = c('All' = 'all'),      }      }

                       multiple = TRUE,

                       options = list(      .btn-primary:hover {      .btn-primary:hover {

                         placeholder = 'Select results',

                         plugins = list('remove_button')        background-color: #159a80;        background-color: #159a80;

                       ))

          )        border-color: #159a80;        border-color: #159a80;

      ),

            }      }

      div(class = "card mt-4",

          h4("Time Period", class = "mb-4", style = "color: #2c3e50; border-bottom: 2px solid #18bc9c; padding-bottom: 0.5rem;"),      .results-panel {      .results-panel {

          # Time range slider

          sliderInput("year_range", "Year Range:",        margin-top: 2rem;        margin-top: 2rem;

                     min = 1800, max = 1860,

                     value = c(1800, 1860),        padding: 1.5rem;        padding: 1.5rem;

                     step = 1,

                     sep = "",        border-radius: 8px;        border-radius: 8px;

                     animate = TRUE)

      ),        background-color: #ffffff;        background-color: #ffffff;

      

      div(class = "card mt-4",        box-shadow: 0 2px 4px rgba(0,0,0,0.1);        box-shadow: 0 2px 4px rgba(0,0,0,0.1);

          h4("Table Controls", class = "mb-4", style = "color: #2c3e50; border-bottom: 2px solid #18bc9c; padding-bottom: 0.5rem;"),

          # Original table controls      }      }

          textInput('filter_col', 'Filter Column', value='', placeholder = 'Enter column name'),

          textInput('filter_val', 'Filter Value', value='', placeholder = 'Enter filter value'),      .results-panel h3 {      .results-panel h3 {

          numericInput('nrows', 'Rows per Page', value = 50, min = 1, max = 1000),

          actionButton('refresh', 'Refresh Data', class = "btn-primary w-100 mt-3")        color: #2c3e50;        color: #2c3e50;

      )

    ),        margin-bottom: 1.5rem;        margin-bottom: 1.5rem;

    

    mainPanel(      }      }

      tabsetPanel(

        tabPanel("Interactive Map",       #download_filtered_csv {      #download_filtered_csv {

                div(class = "card",

                    leafletOutput("map", height = "600px")),        margin-top: 1rem;        margin-top: 1rem;

                div(class = "card mt-4",

                    h4("County Statistics", class = "mb-4", style = "color: #2c3e50; border-bottom: 2px solid #18bc9c; padding-bottom: 0.5rem;"),      }      }

                    DTOutput("county_stats")),

                      /* Leaflet custom styles */      /* Leaflet custom styles */

                # Conditional panel for filtered results

                conditionalPanel(      .leaflet-container {      .leaflet-container {

                  condition = "input.active_filters && input.active_filters.length > 0",

                  div(class = "results-panel",        border-radius: 8px;        border-radius: 8px;

                      h4("Filtered Results", class = "mb-4", style = "color: #2c3e50; border-bottom: 2px solid #18bc9c; padding-bottom: 0.5rem;"),

                      DTOutput("filtered_results_table"),        box-shadow: 0 2px 4px rgba(0,0,0,0.1);        box-shadow: 0 2px 4px rgba(0,0,0,0.1);

                      downloadButton('download_filtered_csv', 'Download Filtered Results', class = "btn-primary mt-3")

                  )      }      }

                )),

        tabPanel("Complete Database",       .leaflet-popup-content {      .leaflet-popup-content {

                div(class = "card",

                    h4("All Petitions", class = "mb-4", style = "color: #2c3e50; border-bottom: 2px solid #18bc9c; padding-bottom: 0.5rem;"),        font-family: 'Source Sans Pro', sans-serif;        font-family: 'Source Sans Pro', sans-serif;

                    DTOutput("petitions_table"),

                    downloadButton('download_csv', 'Download All Petitions', class = "btn-primary mt-3")))        font-size: 14px;        font-size: 14px;

      )

    )        line-height: 1.6;        line-height: 1.6;

  )

)      }      }



# Server      .leaflet-popup-content b {      .leaflet-popup-content b {

server <- function(input, output, session) {

  conn <- dbConnect(RSQLite::SQLite(), db_path)        color: #2c3e50;        color: #2c3e50;

  onSessionEnded(function() dbDisconnect(conn))

        }      }

  # Load states boundary data

  states <- st_read(states_geojson, quiet = TRUE)      /* DataTable custom styles */      /* DataTable custom styles */

  

  # Initialize year range based on data      .dataTables_wrapper {      .dataTables_wrapper {

  observe({

    years <- dbGetQuery(conn, "SELECT MAX(CAST(year AS INTEGER)) as max_year FROM Petitions")        padding: 1rem;        padding: 1rem;

    updateSliderInput(session, "year_range",

                     min = 1800,        border-radius: 8px;        border-radius: 8px;

                     max = max(years$max_year, 1860),

                     value = c(1800, max(years$max_year, 1860)))        background-color: #ffffff;        background-color: #ffffff;

  })

        }      }

  # Initialize reactive values

  query_data <- reactiveVal(NULL)      .dataTables_info, .dataTables_length, .dataTables_filter {      .dataTables_info, .dataTables_length, .dataTables_filter {

  map_data <- reactiveVal(NULL)

          font-size: 0.9rem;        font-size: 0.9rem;

  # Populate reasoning choices dynamically

  observe({        color: #6c757d;        color: #6c757d;

    reasons <- dbGetQuery(conn, "SELECT DISTINCT reasoning FROM Reasoning ORDER BY reasoning")

    updateSelectInput(session, "reasoning_type",      }      }

                     choices = c('All' = 'all', setNames(reasons$reasoning, reasons$reasoning)))

  })      table.dataTable thead th {      table.dataTable thead th {

  

  # Populate court choices dynamically        background-color: #f8f9fa;        background-color: #f8f9fa;

  observe({

    courts <- dbGetQuery(conn, "SELECT DISTINCT court FROM Petitions WHERE court IS NOT NULL ORDER BY court")        color: #2c3e50;        color: #2c3e50;

    updateSelectInput(session, "court_type",

                     choices = c('All' = 'all', setNames(courts$court, courts$court)))        font-weight: 600;        font-weight: 600;

  })

          border-bottom: 2px solid #e9ecef;        border-bottom: 2px solid #e9ecef;

  # Populate result choices dynamically

  observe({      }      }

    results <- dbGetQuery(conn, "SELECT DISTINCT result FROM Result ORDER BY result")

    updateSelectInput(session, "result_type",      table.dataTable tbody td {      table.dataTable tbody td {

                     choices = c('All' = 'all', setNames(results$result, results$result)))

  })        padding: 0.75rem;        padding: 0.75rem;

  

  # Function to get map data based on active filters        vertical-align: middle;        vertical-align: middle;

  get_map_data <- function() {

    if (is.null(input$year_range)) return(NULL)      }      }

    

    # Build WHERE clause for filters      /* Custom slider styles */      /* Custom slider styles */

    where_clauses <- c()

          .irs--shiny .irs-bar {      .irs--shiny .irs-bar {

    if ('reasoning' %in% input$active_filters && length(input$reasoning_type) > 0 && !('all' %in% input$reasoning_type)) {

      reasoning_conditions <- paste(sprintf("r.reasoning = '%s'", input$reasoning_type), collapse = " OR ")        background: #18bc9c;        background: #18bc9c;

      where_clauses <- c(where_clauses, paste0("(", reasoning_conditions, ")"))

    }      }      }

    

    if ('party' %in% input$active_filters) {      .irs--shiny .irs-from, .irs--shiny .irs-to, .irs--shiny .irs-single {      .irs--shiny .irs-from, .irs--shiny .irs-to, .irs--shiny .irs-single {

      where_clauses <- c(where_clauses, sprintf("r.party_accused = '%s'", input$party_type))

    }        background-color: #18bc9c;        background-color: #18bc9c;

    

    if ('court' %in% input$active_filters && length(input$court_type) > 0 && !('all' %in% input$court_type)) {      }      }

      court_conditions <- paste(sprintf("p.court = '%s'", input$court_type), collapse = " OR ")

      where_clauses <- c(where_clauses, paste0("(", court_conditions, ")"))      .irs--shiny .irs-handle {      .irs--shiny .irs-handle {

    }

            border-color: #18bc9c;        border-color: #18bc9c;

    if ('result' %in% input$active_filters && length(input$result_type) > 0 && !('all' %in% input$result_type)) {

      result_conditions <- paste(sprintf("res.result = '%s'", input$result_type), collapse = " OR ")      }      }

      where_clauses <- c(where_clauses, paste0("(", result_conditions, ")"))

    }    ")    ")

    

    filter_sql <- if (length(where_clauses) > 0) {  ),  ),

      paste("AND", paste(where_clauses, collapse = " AND "))

    } else {  tags$div(class = "title-panel", "Antebellum Divorce Petitions Database"),  tags$div(class = "title-panel", "Antebellum Divorce Petitions Database"),

      ""

    }    

    

    # Base query with year filter and joined tables  sidebarLayout(  sidebarLayout(

    sql <- sprintf('

      SELECT     sidebarPanel(    sidebarPanel(

        g.*,

        COUNT(DISTINCT p.petition_id) as value,      div(class = "card",      div(class = "card",

        p.court as courts,

        GROUP_CONCAT(DISTINCT res.result) as results,        h4("Filter Options", class = "mb-4", style = "color: #2c3e50; border-bottom: 2px solid #18bc9c; padding-bottom: 0.5rem;"),        h4("Filter Options", class = "mb-4", style = "color: #2c3e50; border-bottom: 2px solid #18bc9c; padding-bottom: 0.5rem;"),

        GROUP_CONCAT(DISTINCT p.year) as years,

        GROUP_CONCAT(DISTINCT r.reasoning) as reasons        # Filter controls        # Filter controls

      FROM Geolocations g

      INNER JOIN Petitions p ON g.county = p.county AND g.state = p.state        checkboxGroupInput('active_filters', 'Select Filters to Apply:',        checkboxGroupInput('active_filters', 'Select Filters to Apply:',

      LEFT JOIN Petition_Reasoning_Lookup prl ON p.petition_id = prl.petition_id

      LEFT JOIN Reasoning r ON prl.reasoning_id = r.reasoning_id                          choices = c(                          choices = c(

      LEFT JOIN Result res ON p.petition_id = res.petition_id

      WHERE 1=1                             'Reasoning' = 'reasoning',                            'Reasoning' = 'reasoning',

      AND CAST(COALESCE(p.year, "0") AS INTEGER) BETWEEN %d AND %d

      %s                            'Party Accused' = 'party',                            'Party Accused' = 'party',

      GROUP BY g.state, g.county, g.latitude, g.longitude

    ', input$year_range[1], input$year_range[2], filter_sql)                            'Court Type' = 'court',                            'Court Type' = 'court',

    

    dbGetQuery(conn, sql)                            'Result' = 'result'                            'Result' = 'result'

  }

                            )),                          )),

  # Update map when inputs change

  observe({              

    data <- get_map_data()

    map_data(data)        conditionalPanel(      conditionalPanel(

  })

            condition = "input.active_filters.includes('reasoning')",        condition = "input.active_filters.includes('reasoning')",

  # Render the map

  output$map <- renderLeaflet({          selectizeInput('reasoning_type', 'Reasoning Category',        selectizeInput('reasoning_type', 'Reasoning Category',

    data <- map_data()

    if (is.null(data) || nrow(data) == 0) {                     choices = c('All' = 'all'),                   choices = c('All' = 'all'),

      return(leaflet() %>%

             addProviderTiles(providers$CartoDB.Positron) %>%                     multiple = TRUE,                   multiple = TRUE,

             setView(lng = -85, lat = 34, zoom = 6) %>%

             addPolygons(data = states,                     options = list(                   options = list(placeholder = 'Select reasons'))  # Will be populated dynamically

                        fillColor = "white",

                        weight = 2,                       placeholder = 'Select reasons',      ),

                        opacity = 1,

                        color = "#008cba",                       plugins = list('remove_button')      

                        fillOpacity = 0.1))

    }                     ))      conditionalPanel(

    

    # Create color palette based on values        ),        condition = "input.active_filters.includes('party')",

    pal <- colorNumeric(

      palette = viridis(10),                selectInput('party_type', 'Party Accused',

      domain = data$value

    )        conditionalPanel(                   choices = c(

    

    # Create the map          condition = "input.active_filters.includes('party')",                     'Husband Accused' = 'husband_accused',

    leaflet() %>%

      addProviderTiles(providers$CartoDB.Positron) %>%          selectInput('party_type', 'Party Accused',                     'Wife Accused' = 'wife_accused'

      setView(lng = -85, lat = 34, zoom = 6) %>%

      addPolygons(data = states,                     choices = c(                   ))

                 fillColor = "#f8f9fa",

                 weight = 2,                       'Husband Accused' = 'husband_accused',      ),

                 opacity = 0.8,

                 color = "#3498db",                       'Wife Accused' = 'wife_accused'      

                 fillOpacity = 0.2,

                 highlightOptions = highlightOptions(                     ))      conditionalPanel(

                   weight = 3,

                   color = "#2c3e50",        ),        condition = "input.active_filters.includes('court')",

                   fillOpacity = 0.3,

                   bringToFront = TRUE                selectizeInput('court_type', 'Court Type',

                 )) %>%

      addCircleMarkers(        conditionalPanel(                   choices = c('All' = 'all'),

        data = data,

        lng = ~longitude,          condition = "input.active_filters.includes('court')",                   multiple = TRUE,

        lat = ~latitude,

        radius = ~sqrt(value) * 3,          selectizeInput('court_type', 'Court Type',                   options = list(placeholder = 'Select courts'))  # Will be populated dynamically

        fillColor = ~pal(value),

        color = "#2c3e50",                     choices = c('All' = 'all'),      ),

        weight = 1,

        opacity = 1,                     multiple = TRUE,

        fillOpacity = 0.8,

        popup = ~paste0(                     options = list(      conditionalPanel(

          "<div style='font-family: Source Sans Pro, sans-serif;'>",

          "<h6 style='margin: 0 0 8px; color: #2c3e50; border-bottom: 2px solid #18bc9c; padding-bottom: 4px;'>",                       placeholder = 'Select courts',        condition = "input.active_filters.includes('result')",

          county, ", ", state,

          "</h6>",                       plugins = list('remove_button')        selectizeInput('result_type', 'Petition Result',

          "<strong>Total Petitions:</strong> ", value, "<br>",

          "<strong>Years:</strong> ", years, "<br>",                     ))                   choices = c('All' = 'all'),

          "<strong>Courts:</strong> ", courts, "<br>",

          "<strong>Reasons:</strong> ", reasons, "<br>",        ),                   multiple = TRUE,

          "<strong>Results:</strong> ", results, "<br>",

          "<div style='margin-top: 8px; padding-top: 8px; border-top: 1px solid #e9ecef;'>",                   options = list(placeholder = 'Select results'))  # Will be populated dynamically

          "<em>Click for more details below</em>",

          "</div>",        conditionalPanel(      ),

          "</div>"

        ),          condition = "input.active_filters.includes('result')",      

        highlightOptions = highlightOptions(

          weight = 2,          selectizeInput('result_type', 'Petition Result',      div(class = "card mt-4",

          color = "#18bc9c",

          fillOpacity = 1,                     choices = c('All' = 'all'),        h4("Time Period", class = "mb-4", style = "color: #2c3e50; border-bottom: 2px solid #18bc9c; padding-bottom: 0.5rem;"),

          bringToFront = TRUE

        )                     multiple = TRUE,        # Time range slider

      ) %>%

      addLegend("bottomright",                     options = list(        sliderInput("year_range", "Year Range:",

                pal = pal,

                values = data$value,                       placeholder = 'Select results',                   min = 1800, max = 1860,

                title = "Count",

                opacity = 1)                       plugins = list('remove_button')                   value = c(1800, 1860),

  })

                       ))                   step = 1,

  # Render county statistics table

  output$county_stats <- renderDT({        )                   sep = "",

    data <- map_data()

    if (is.null(data) || nrow(data) == 0) {      ),                   animate = TRUE)

      return(datatable(data.frame(

        County = character(0),            ),

        State = character(0),

        Count = integer(0)      div(class = "card mt-4",      

      )))

    }        h4("Time Period", class = "mb-4", style = "color: #2c3e50; border-bottom: 2px solid #18bc9c; padding-bottom: 0.5rem;"),      div(class = "card mt-4",

    

    # Format data for display        # Time range slider        h4("Table Controls", class = "mb-4", style = "color: #2c3e50; border-bottom: 2px solid #18bc9c; padding-bottom: 0.5rem;"),

    stats <- data[c("county", "state", "value", "courts", "reasons")]

    stats <- stats[order(-stats$value),]        sliderInput("year_range", "Year Range:",        # Original table controls

    stats <- stats[stats$value > 0,]  # Only show counties with data

                       min = 1800, max = 1860,        textInput('filter_col', 'Filter Column', value='', placeholder = 'Enter column name'),

    # Build title based on active filters

    title_parts <- c()                   value = c(1800, 1860),        textInput('filter_val', 'Filter Value', value='', placeholder = 'Enter filter value'),

    if ('reasoning' %in% input$active_filters && length(input$reasoning_type) > 0 && !('all' %in% input$reasoning_type)) {

      title_parts <- c(title_parts, sprintf("Reasoning: %s", paste(input$reasoning_type, collapse = ", ")))                   step = 1,        numericInput('nrows', 'Rows per Page', value = 50, min = 1, max = 1000),

    }

    if ('party' %in% input$active_filters) {                   sep = "",        actionButton('refresh', 'Refresh Data', class = "btn-primary w-100 mt-3"))

      title_parts <- c(title_parts, sprintf("Party: %s", input$party_type))

    }                   animate = TRUE)    ),

    if ('court' %in% input$active_filters && length(input$court_type) > 0 && !('all' %in% input$court_type)) {

      title_parts <- c(title_parts, sprintf("Court: %s", paste(input$court_type, collapse = ", ")))      ),    

    }

              mainPanel(

    filter_text <- if (length(title_parts) > 0) {

      paste0(" (", paste(title_parts, collapse = ", "), ")")      div(class = "card mt-4",      tabsetPanel(

    } else {

      ""        h4("Table Controls", class = "mb-4", style = "color: #2c3e50; border-bottom: 2px solid #18bc9c; padding-bottom: 0.5rem;"),        tabPanel("Interactive Map", 

    }

            # Original table controls                div(class = "card",

    colnames(stats) <- c(

      "County",        textInput('filter_col', 'Filter Column', value='', placeholder = 'Enter column name'),                    leafletOutput("map", height = "600px")),

      "State",

      sprintf("Petitions %d-%d%s", input$year_range[1], input$year_range[2], filter_text),        textInput('filter_val', 'Filter Value', value='', placeholder = 'Enter filter value'),                div(class = "card mt-4",

      "Courts",

      "Reasons"        numericInput('nrows', 'Rows per Page', value = 50, min = 1, max = 1000),                    h4("County Statistics", class = "mb-4", style = "color: #2c3e50; border-bottom: 2px solid #18bc9c; padding-bottom: 0.5rem;"),

    )

            actionButton('refresh', 'Refresh Data', class = "btn-primary w-100 mt-3")                    DTOutput("county_stats")),

    datatable(stats,

              options = list(      )                

                pageLength = 10,

                order = list(list(2, 'desc')),    ),                # Conditional panel for filtered results

                dom = 'Bfrtip',

                scrollX = TRUE,                    conditionalPanel(

                className = 'cell-border stripe hover'

              ),    mainPanel(                  condition = "input.active_filters && input.active_filters.length > 0",

              style = 'bootstrap4')

  })      tabsetPanel(                  div(class = "results-panel",

  

  # Auto-load data on startup        tabPanel("Interactive Map",                       h4("Filtered Results", class = "mb-4", style = "color: #2c3e50; border-bottom: 2px solid #18bc9c; padding-bottom: 0.5rem;"),

  observeEvent(input$refresh, {

    filter_col <- input$filter_col                div(class = "card",                      DTOutput("filtered_results_table"),

    filter_val <- input$filter_val

    sql <- 'SELECT p.*, GROUP_CONCAT(r.reasoning, ", ") as reasoning                    leafletOutput("map", height = "600px")),                      downloadButton('download_filtered_csv', 'Download Filtered Results', class = "btn-primary mt-3")

            FROM Petitions p

            LEFT JOIN Petition_Reasoning_Lookup prl ON p.petition_id = prl.petition_id                div(class = "card mt-4",                  )

            LEFT JOIN Reasoning r ON prl.reasoning_id = r.reasoning_id

            LEFT JOIN Court c ON p.court_id = c.court_id'                    h4("County Statistics", class = "mb-4", style = "color: #2c3e50; border-bottom: 2px solid #18bc9c; padding-bottom: 0.5rem;"),                )),

    

    has_filter <- FALSE                    DTOutput("county_stats")),        tabPanel("Complete Database", 

    if (nzchar(filter_col) && nzchar(filter_val)) {

      if (!grepl('^[A-Za-z0-9_]+$', filter_col)) {                                div(class = "card",

        showNotification('Invalid filter column name', type='error')

        return()                # Conditional panel for filtered results                    h4("All Petitions", class = "mb-4", style = "color: #2c3e50; border-bottom: 2px solid #18bc9c; padding-bottom: 0.5rem;"),

      }

      sql <- paste0(sql, ' WHERE p.', filter_col, ' = ?')                conditionalPanel(                    DTOutput("petitions_table"),

      has_filter <- TRUE

    }                  condition = "input.active_filters && input.active_filters.length > 0",                    downloadButton('download_csv', 'Download All Petitions', class = "btn-primary mt-3")))

    

    sql <- paste0(sql, ' GROUP BY p.petition_id LIMIT ', as.integer(input$nrows))                  div(class = "results-panel",      )

    

    res <- tryCatch({                      h4("Filtered Results", class = "mb-4", style = "color: #2c3e50; border-bottom: 2px solid #18bc9c; padding-bottom: 0.5rem;"),    )

      if (has_filter) {

        dbGetQuery(conn, sql, params = list(filter_val))                      DTOutput("filtered_results_table"),  )

      } else {

        dbGetQuery(conn, sql)                      downloadButton('download_filtered_csv', 'Download Filtered Results', class = "btn-primary mt-3"))

      }

    }, error = function(e) {                  )

      showNotification(paste('Query error:', e$message), type='error')

      return(NULL)                )),# Server

    })

            tabPanel("Complete Database", server <- function(input, output, session) {

    query_data(res)

  })                div(class = "card",  conn <- dbConnect(RSQLite::SQLite(), db_path)

  

  # Render petitions table                    h4("All Petitions", class = "mb-4", style = "color: #2c3e50; border-bottom: 2px solid #18bc9c; padding-bottom: 0.5rem;"),  onSessionEnded(function() dbDisconnect(conn))

  output$petitions_table <- renderDT({

    df <- query_data()                    DTOutput("petitions_table"),  

    if (is.null(df)) return(NULL)

    datatable(df,                     downloadButton('download_csv', 'Download All Petitions', class = "btn-primary mt-3")))  # Load states boundary data

             options = list(

               pageLength = input$nrows,      )  states <- st_read(states_geojson, quiet = TRUE)

               scrollX = TRUE,

               dom = 'Bfrtip',    )  

               className = 'cell-border stripe hover'

             ),  )  # Initialize year range based on data

             style = 'bootstrap4')

  }))  observe({

  

  # Download handler for complete dataset    years <- dbGetQuery(conn, "SELECT MAX(CAST(year AS INTEGER)) as max_year FROM Petitions")

  output$download_csv <- downloadHandler(

    filename = function() paste0('petitions_', Sys.Date(), '.csv'),# Server    updateSliderInput(session, "year_range",

    content = function(file) {

      write.csv(query_data(), file, row.names = FALSE)server <- function(input, output, session) {                     min = 1800,

    }

  )  conn <- dbConnect(RSQLite::SQLite(), db_path)                     max = max(years$max_year, 1860),

  

  # Function to get filtered results data  onSessionEnded(function() dbDisconnect(conn))                     value = c(1800, max(years$max_year, 1860)))

  get_filtered_results <- function() {

    if (is.null(input$year_range)) return(NULL)    })

    

    # Build WHERE clause for filters  # Load states boundary data  

    where_clauses <- c()

      states <- st_read(states_geojson, quiet = TRUE)  # Initialize reactive values

    if ('reasoning' %in% input$active_filters && length(input$reasoning_type) > 0 && !('all' %in% input$reasoning_type)) {

      reasoning_conditions <- paste(sprintf("r.reasoning = '%s'", input$reasoning_type), collapse = " OR ")    query_data <- reactiveVal(NULL)

      where_clauses <- c(where_clauses, paste0("(", reasoning_conditions, ")"))

    }  # Initialize year range based on data  map_data <- reactiveVal(NULL)

    

    if ('party' %in% input$active_filters) {  observe({  

      where_clauses <- c(where_clauses, sprintf("r.party_accused = '%s'", input$party_type))

    }    years <- dbGetQuery(conn, "SELECT MAX(CAST(year AS INTEGER)) as max_year FROM Petitions")  # Populate reasoning choices dynamically

    

    if ('court' %in% input$active_filters && length(input$court_type) > 0 && !('all' %in% input$court_type)) {    updateSliderInput(session, "year_range",  observe({

      court_conditions <- paste(sprintf("p.court = '%s'", input$court_type), collapse = " OR ")

      where_clauses <- c(where_clauses, paste0("(", court_conditions, ")"))                     min = 1800,    reasons <- dbGetQuery(conn, "SELECT DISTINCT reasoning FROM Reasoning ORDER BY reasoning")

    }

                         max = max(years$max_year, 1860),    updateSelectInput(session, "reasoning_type",

    if ('result' %in% input$active_filters && length(input$result_type) > 0 && !('all' %in% input$result_type)) {

      result_conditions <- paste(sprintf("res.result = '%s'", input$result_type), collapse = " OR ")                     value = c(1800, max(years$max_year, 1860)))                     choices = c('All' = 'all', setNames(reasons$reasoning, reasons$reasoning)))

      where_clauses <- c(where_clauses, paste0("(", result_conditions, ")"))

    }  })  })

    

    filter_sql <- if (length(where_clauses) > 0) {    

      paste("AND", paste(where_clauses, collapse = " AND "))

    } else {  # Initialize reactive values  # Populate court choices dynamically

      ""

    }  query_data <- reactiveVal(NULL)  observe({

    

    # Base query with year filter  map_data <- reactiveVal(NULL)    courts <- dbGetQuery(conn, "SELECT DISTINCT court FROM Petitions WHERE court IS NOT NULL ORDER BY court")

    sql <- sprintf('

      SELECT DISTINCT      updateSelectInput(session, "court_type",

        p.petition_id,

        p.year,  # Populate reasoning choices dynamically                     choices = c('All' = 'all', setNames(courts$court, courts$court)))

        p.county,

        p.state,  observe({  })

        GROUP_CONCAT(DISTINCT r.reasoning) as reasoning_list,

        GROUP_CONCAT(DISTINCT r.party_accused) as party_accused,    reasons <- dbGetQuery(conn, "SELECT DISTINCT reasoning FROM Reasoning ORDER BY reasoning")

        p.court as court_name,

        GROUP_CONCAT(DISTINCT res.result) as result    updateSelectInput(session, "reasoning_type",  # Populate result choices dynamically

      FROM Petitions p

      LEFT JOIN Petition_Reasoning_Lookup prl ON p.petition_id = prl.petition_id                     choices = c('All' = 'all', setNames(reasons$reasoning, reasons$reasoning)))  observe({

      LEFT JOIN Reasoning r ON prl.reasoning_id = r.reasoning_id

      LEFT JOIN Result res ON p.petition_id = res.petition_id  })    results <- dbGetQuery(conn, "SELECT DISTINCT result FROM Result ORDER BY result")

      WHERE 1=1 

      AND CAST(COALESCE(p.year, "0") AS INTEGER) BETWEEN %d AND %d      updateSelectInput(session, "result_type",

      %s

      GROUP BY p.petition_id   # Populate court choices dynamically                     choices = c('All' = 'all', setNames(results$result, results$result)))

      ORDER BY p.year, p.state, p.county

    ', input$year_range[1], input$year_range[2], filter_sql)  observe({  })

    

    dbGetQuery(conn, sql)    courts <- dbGetQuery(conn, "SELECT DISTINCT court FROM Petitions WHERE court IS NOT NULL ORDER BY court")

  }

      updateSelectInput(session, "court_type",  # Function to get map data based on active filters

  # Render filtered results table

  output$filtered_results_table <- renderDT({                     choices = c('All' = 'all', setNames(courts$court, courts$court)))  get_map_data <- function() {

    data <- get_filtered_results()

    if (is.null(data)) return(NULL)  })    if (is.null(input$year_range)) return(NULL)

    

    # Rename columns for display    

    colnames(data) <- c("Petition ID", "Year", "County", "State", "Reasoning", "Party Accused", "Court", "Result")

      # Populate result choices dynamically    # Build WHERE clause for filters

    datatable(data,

              options = list(  observe({    where_clauses <- c()

                pageLength = 25,

                scrollX = TRUE,    results <- dbGetQuery(conn, "SELECT DISTINCT result FROM Result ORDER BY result")    

                dom = 'Bfrtip',

                className = 'cell-border stripe hover'    updateSelectInput(session, "result_type",    if ('reasoning' %in% input$active_filters && length(input$reasoning_type) > 0 && !('all' %in% input$reasoning_type)) {

              ),

              style = 'bootstrap4')                     choices = c('All' = 'all', setNames(results$result, results$result)))      reasoning_conditions <- paste(sprintf("r.reasoning = '%s'", input$reasoning_type), collapse = " OR ")

  })

    })      where_clauses <- c(where_clauses, paste0("(", reasoning_conditions, ")"))

  # Download handler for filtered results

  output$download_filtered_csv <- downloadHandler(    }

    filename = function() {

      filter_text <- paste0(input$active_filters, collapse = "_")  # Function to get map data based on active filters    

      paste0('petitions_filtered_', filter_text, '_', Sys.Date(), '.csv')

    },  get_map_data <- function() {    if ('party' %in% input$active_filters) {

    content = function(file) {

      write.csv(get_filtered_results(), file, row.names = FALSE)    if (is.null(input$year_range)) return(NULL)      where_clauses <- c(where_clauses, sprintf("r.party_accused = '%s'", input$party_type))

    }

  )        }

}

    # Build WHERE clause for filters    

shinyApp(ui, server)
    where_clauses <- c()    if ('court' %in% input$active_filters && length(input$court_type) > 0 && !('all' %in% input$court_type)) {

          court_conditions <- paste(sprintf("p.court = '%s'", input$court_type), collapse = " OR ")

    if ('reasoning' %in% input$active_filters && length(input$reasoning_type) > 0 && !('all' %in% input$reasoning_type)) {      where_clauses <- c(where_clauses, paste0("(", court_conditions, ")"))

      reasoning_conditions <- paste(sprintf("r.reasoning = '%s'", input$reasoning_type), collapse = " OR ")    }

      where_clauses <- c(where_clauses, paste0("(", reasoning_conditions, ")"))

    }    if ('result' %in% input$active_filters && length(input$result_type) > 0 && !('all' %in% input$result_type)) {

          result_conditions <- paste(sprintf("res.result = '%s'", input$result_type), collapse = " OR ")

    if ('party' %in% input$active_filters) {      where_clauses <- c(where_clauses, paste0("(", result_conditions, ")"))

      where_clauses <- c(where_clauses, sprintf("r.party_accused = '%s'", input$party_type))    }

    }    

        filter_sql <- if (length(where_clauses) > 0) {

    if ('court' %in% input$active_filters && length(input$court_type) > 0 && !('all' %in% input$court_type)) {      paste("AND", paste(where_clauses, collapse = " AND "))

      court_conditions <- paste(sprintf("p.court = '%s'", input$court_type), collapse = " OR ")    } else {

      where_clauses <- c(where_clauses, paste0("(", court_conditions, ")"))      ""

    }    }

    

    if ('result' %in% input$active_filters && length(input$result_type) > 0 && !('all' %in% input$result_type)) {    # Base query with year filter and joined tables

      result_conditions <- paste(sprintf("res.result = '%s'", input$result_type), collapse = " OR ")    sql <- sprintf('

      where_clauses <- c(where_clauses, paste0("(", result_conditions, ")"))      SELECT 

    }        g.*,

            COUNT(DISTINCT p.petition_id) as value,

    filter_sql <- if (length(where_clauses) > 0) {        p.court as courts,

      paste("AND", paste(where_clauses, collapse = " AND "))        GROUP_CONCAT(DISTINCT res.result) as results,

    } else {        GROUP_CONCAT(DISTINCT p.year) as years,

      ""        GROUP_CONCAT(DISTINCT r.reasoning) as reasons

    }      FROM Geolocations g

          INNER JOIN Petitions p ON g.county = p.county AND g.state = p.state

    # Base query with year filter and joined tables      LEFT JOIN Petition_Reasoning_Lookup prl ON p.petition_id = prl.petition_id

    sql <- sprintf('      LEFT JOIN Reasoning r ON prl.reasoning_id = r.reasoning_id

      SELECT       LEFT JOIN Result res ON p.petition_id = res.petition_id

        g.*,      WHERE 1=1 

        COUNT(DISTINCT p.petition_id) as value,      AND CAST(COALESCE(p.year, "0") AS INTEGER) BETWEEN %d AND %d

        p.court as courts,      %s

        GROUP_CONCAT(DISTINCT res.result) as results,      GROUP BY g.state, g.county, g.latitude, g.longitude

        GROUP_CONCAT(DISTINCT p.year) as years,    ', input$year_range[1], input$year_range[2], filter_sql)

        GROUP_CONCAT(DISTINCT r.reasoning) as reasons    

      FROM Geolocations g    dbGetQuery(conn, sql)

      INNER JOIN Petitions p ON g.county = p.county AND g.state = p.state  }

      LEFT JOIN Petition_Reasoning_Lookup prl ON p.petition_id = prl.petition_id  

      LEFT JOIN Reasoning r ON prl.reasoning_id = r.reasoning_id  # Update map when inputs change

      LEFT JOIN Result res ON p.petition_id = res.petition_id  observe({

      WHERE 1=1     data <- get_map_data()

      AND CAST(COALESCE(p.year, "0") AS INTEGER) BETWEEN %d AND %d    map_data(data)

      %s  })

      GROUP BY g.state, g.county, g.latitude, g.longitude  

    ', input$year_range[1], input$year_range[2], filter_sql)  # Render the map

      output$map <- renderLeaflet({

    dbGetQuery(conn, sql)    data <- map_data()

  }    if (is.null(data) || nrow(data) == 0) {

        return(leaflet() %>%

  # Update map when inputs change             addProviderTiles(providers$CartoDB.Positron) %>%

  observe({             setView(lng = -85, lat = 34, zoom = 6) %>%

    data <- get_map_data()             addPolygons(data = states,

    map_data(data)                        fillColor = "white",

  })                        weight = 2,

                          opacity = 1,

  # Render the map                        color = "#008cba",

  output$map <- renderLeaflet({                        fillOpacity = 0.1))

    data <- map_data()    }

    if (is.null(data) || nrow(data) == 0) {    

      return(leaflet() %>%    # Create color palette based on values

             addProviderTiles(providers$CartoDB.Positron) %>%    pal <- colorNumeric(

             setView(lng = -85, lat = 34, zoom = 6) %>%      palette = viridis(10),

             addPolygons(data = states,      domain = data$value

                        fillColor = "#f8f9fa",    )

                        weight = 2,    

                        opacity = 0.8,    # Create the map

                        color = "#3498db",    leaflet() %>%

                        fillOpacity = 0.2,      addProviderTiles(providers$CartoDB.Positron) %>%

                        highlightOptions = highlightOptions(      setView(lng = -85, lat = 34, zoom = 6) %>%

                          weight = 3,      addPolygons(data = states,

                          color = "#2c3e50",                 fillColor = "#f8f9fa",

                          fillOpacity = 0.3,                 weight = 2,

                          bringToFront = TRUE                 opacity = 0.8,

                        )))                 color = "#3498db",

    }                 fillOpacity = 0.2,

                     highlightOptions = highlightOptions(

    # Create color palette based on values                   weight = 3,

    pal <- colorNumeric(                   color = "#2c3e50",

      palette = "viridis",                   fillOpacity = 0.3,

      domain = data$value,                   bringToFront = TRUE

      reverse = TRUE                 )) %>%

    )      addCircleMarkers(

            data = data,

    # Create the map        lng = ~longitude,

    leaflet() %>%        lat = ~latitude,

      addProviderTiles(providers$CartoDB.Positron) %>%        radius = ~sqrt(value) * 3,

      setView(lng = -85, lat = 34, zoom = 6) %>%        fillColor = ~pal(value),

      addPolygons(data = states,        color = "#2c3e50",

                 fillColor = "#f8f9fa",        weight = 1,

                 weight = 2,        opacity = 1,

                 opacity = 0.8,        fillOpacity = 0.8,

                 color = "#3498db",        popup = ~paste0(

                 fillOpacity = 0.2,          "<div style='font-family: Source Sans Pro, sans-serif;'>",

                 highlightOptions = highlightOptions(          "<h6 style='margin: 0 0 8px; color: #2c3e50; border-bottom: 2px solid #18bc9c; padding-bottom: 4px;'>",

                   weight = 3,          county, ", ", state,

                   color = "#2c3e50",          "</h6>",

                   fillOpacity = 0.3,          "<strong>Total Petitions:</strong> ", value, "<br>",

                   bringToFront = TRUE          "<strong>Years:</strong> ", years, "<br>",

                 )) %>%          "<strong>Courts:</strong> ", courts, "<br>",

      addCircleMarkers(          "<strong>Reasons:</strong> ", reasons, "<br>",

        data = data,          "<strong>Results:</strong> ", results, "<br>",

        lng = ~longitude,          "<div style='margin-top: 8px; padding-top: 8px; border-top: 1px solid #e9ecef;'>",

        lat = ~latitude,          "<em>Click for more details below</em>",

        radius = ~sqrt(value) * 3,          "</div>",

        fillColor = ~pal(value),          "</div>"

        color = "#2c3e50",        ),

        weight = 1,        highlightOptions = highlightOptions(

        opacity = 1,          weight = 2,

        fillOpacity = 0.8,          color = "#18bc9c",

        popup = ~paste0(          fillOpacity = 1,

          "<div style='font-family: Source Sans Pro, sans-serif;'>",          bringToFront = TRUE

          "<h6 style='margin: 0 0 8px; color: #2c3e50; border-bottom: 2px solid #18bc9c; padding-bottom: 4px;'>",        )

          county, ", ", state,      ) %>%

          "</h6>",      addLegend("bottomright",

          "<strong>Total Petitions:</strong> ", value, "<br>",                pal = pal,

          "<strong>Years:</strong> ", years, "<br>",                values = data$value,

          "<strong>Courts:</strong> ", courts, "<br>",                title = "Count",

          "<strong>Reasons:</strong> ", reasons, "<br>",                opacity = 1)

          "<strong>Results:</strong> ", results, "<br>",  })

          "<div style='margin-top: 8px; padding-top: 8px; border-top: 1px solid #e9ecef;'>",  

          "<em>Click for more details below</em>",  # Render county statistics table

          "</div>",  output$county_stats <- renderDT({

          "</div>"    data <- map_data()

        ),    if (is.null(data) || nrow(data) == 0) {

        highlightOptions = highlightOptions(      return(datatable(data.frame(

          weight = 2,        County = character(0),

          color = "#18bc9c",        State = character(0),

          fillOpacity = 1,        Count = integer(0)

          bringToFront = TRUE      )))

        )    }

      ) %>%    

      addLegend("bottomright",    # Format data for display

                pal = pal,    stats <- data[c("county", "state", "value", "courts", "reasons")]

                values = data$value,    stats <- stats[order(-stats$value),]

                title = "Number of Petitions",    stats <- stats[stats$value > 0,]  # Only show counties with data

                opacity = 0.9,    

                labFormat = labelFormat(prefix = ""),    # Build title based on active filters

                className = "info legend")    title_parts <- c()

  })    if ('reasoning' %in% input$active_filters && length(input$reasoning_type) > 0 && !('all' %in% input$reasoning_type)) {

        title_parts <- c(title_parts, sprintf("Reasoning: %s", paste(input$reasoning_type, collapse = ", ")))

  # Render county statistics table    }

  output$county_stats <- renderDT({    if ('party' %in% input$active_filters) {

    data <- map_data()      title_parts <- c(title_parts, sprintf("Party: %s", input$party_type))

    if (is.null(data) || nrow(data) == 0) {    }

      return(datatable(data.frame(    if ('court' %in% input$active_filters && input$court_type != 'all') {

        County = character(0),      title_parts <- c(title_parts, sprintf("Court: %s", input$court_type))

        State = character(0),    }

        Count = integer(0)    

      )))    filter_text <- if (length(title_parts) > 0) {

    }      paste0(" (", paste(title_parts, collapse = ", "), ")")

        } else {

    # Format data for display      ""

    stats <- data[c("county", "state", "value", "courts", "reasons")]    }

    stats <- stats[order(-stats$value),]    

    stats <- stats[stats$value > 0,]  # Only show counties with data    colnames(stats) <- c(

          "County",

    # Build title based on active filters      "State",

    title_parts <- c()      sprintf("Petitions %d-%d%s", input$year_range[1], input$year_range[2], filter_text),

    if ('reasoning' %in% input$active_filters && length(input$reasoning_type) > 0 && !('all' %in% input$reasoning_type)) {      "Courts",

      title_parts <- c(title_parts, sprintf("Reasoning: %s", paste(input$reasoning_type, collapse = ", ")))      "Reasons")

    }    

    if ('party' %in% input$active_filters) {    datatable(stats,

      title_parts <- c(title_parts, sprintf("Party: %s", input$party_type))              options = list(

    }                pageLength = 10,

    if ('court' %in% input$active_filters && input$court_type != 'all') {                order = list(list(2, 'desc')),

      title_parts <- c(title_parts, sprintf("Court: %s", input$court_type))                dom = 'Bfrtip',

    }                scrollX = TRUE,

                    className = 'cell-border stripe hover'

    filter_text <- if (length(title_parts) > 0) {              ),

      paste0(" (", paste(title_parts, collapse = ", "), ")")              style = 'bootstrap4')

    } else {  })

      ""  

    }  # Auto-load data on startup

      observeEvent(input$refresh, {

    colnames(stats) <- c(    filter_col <- input$filter_col

      "County",    filter_val <- input$filter_val

      "State",    sql <- 'SELECT p.*, GROUP_CONCAT(r.reasoning, ", ") as reasoning

      sprintf("Petitions %d-%d%s", input$year_range[1], input$year_range[2], filter_text),            FROM Petitions p

      "Courts",            LEFT JOIN Petition_Reasoning_Lookup prl ON p.petition_id = prl.petition_id

      "Reasons")            LEFT JOIN Reasoning r ON prl.reasoning_id = r.reasoning_id

                LEFT JOIN Court c ON p.court_id = c.court_id'

    datatable(stats,    

              options = list(    has_filter <- FALSE

                pageLength = 10,    if (nzchar(filter_col) && nzchar(filter_val)) {

                order = list(list(2, 'desc')),      if (!grepl('^[A-Za-z0-9_]+$', filter_col)) {

                dom = 'Bfrtip',        showNotification('Invalid filter column name', type='error')

                scrollX = TRUE,        return()

                className = 'cell-border stripe hover'      }

              ),      sql <- paste0(sql, ' WHERE p.', filter_col, ' = ?')

              style = 'bootstrap4')      has_filter <- TRUE

  })    }

      sql <- paste0(sql, ' GROUP BY p.petition_id LIMIT ', as.integer(input$nrows))

  # Auto-load data on startup    

  observeEvent(input$refresh, {    res <- tryCatch({

    filter_col <- input$filter_col      if (has_filter) {

    filter_val <- input$filter_val        dbGetQuery(conn, sql, params = list(filter_val))

    sql <- 'SELECT p.*, GROUP_CONCAT(r.reasoning, ", ") as reasoning      } else {

            FROM Petitions p        dbGetQuery(conn, sql)

            LEFT JOIN Petition_Reasoning_Lookup prl ON p.petition_id = prl.petition_id      }

            LEFT JOIN Reasoning r ON prl.reasoning_id = r.reasoning_id    }, error = function(e) {

            LEFT JOIN Court c ON p.court_id = c.court_id'      showNotification(paste('Query error:', e$message), type='error')

          return(NULL)

    has_filter <- FALSE    })

    if (nzchar(filter_col) && nzchar(filter_val)) {    query_data(res)

      if (!grepl('^[A-Za-z0-9_]+$', filter_col)) {  })

        showNotification('Invalid filter column name', type='error')  

        return()  output$petitions_table <- renderDT({

      }    df <- query_data()

      sql <- paste0(sql, ' WHERE p.', filter_col, ' = ?')    if (is.null(df)) return(NULL)

      has_filter <- TRUE    datatable(df, options = list(pageLength = input$nrows, scrollX = TRUE))

    }  })

    sql <- paste0(sql, ' GROUP BY p.petition_id LIMIT ', as.integer(input$nrows))  

      output$download_csv <- downloadHandler(

    res <- tryCatch({    filename = function() paste0('petitions_', Sys.Date(), '.csv'),

      if (has_filter) {    content = function(file) {

        dbGetQuery(conn, sql, params = list(filter_val))      write.csv(query_data(), file, row.names = FALSE)

      } else {    }

        dbGetQuery(conn, sql)  )

      }  

    }, error = function(e) {  # Function to get filtered results data

      showNotification(paste('Query error:', e$message), type='error')  get_filtered_results <- function() {

      return(NULL)    if (is.null(input$year_range)) return(NULL)

    })    

    query_data(res)    # Build WHERE clause for filters

  })    where_clauses <- c()

      

  output$petitions_table <- renderDT({    if ('reasoning' %in% input$active_filters && length(input$reasoning_type) > 0 && !('all' %in% input$reasoning_type)) {

    df <- query_data()      reasoning_conditions <- paste(sprintf("r.reasoning = '%s'", input$reasoning_type), collapse = " OR ")

    if (is.null(df)) return(NULL)      where_clauses <- c(where_clauses, paste0("(", reasoning_conditions, ")"))

    datatable(df,     }

             options = list(    

               pageLength = input$nrows,    if ('party' %in% input$active_filters) {

               scrollX = TRUE,      where_clauses <- c(where_clauses, sprintf("r.party_accused = '%s'", input$party_type))

               dom = 'Bfrtip',    }

               className = 'cell-border stripe hover'    

             ),    if ('court' %in% input$active_filters && length(input$court_type) > 0 && !('all' %in% input$court_type)) {

             style = 'bootstrap4')      court_conditions <- paste(sprintf("p.court = '%s'", input$court_type), collapse = " OR ")

  })      where_clauses <- c(where_clauses, paste0("(", court_conditions, ")"))

      }

  output$download_csv <- downloadHandler(

    filename = function() paste0('petitions_', Sys.Date(), '.csv'),    if ('result' %in% input$active_filters && length(input$result_type) > 0 && !('all' %in% input$result_type)) {

    content = function(file) {      result_conditions <- paste(sprintf("res.result = '%s'", input$result_type), collapse = " OR ")

      write.csv(query_data(), file, row.names = FALSE)      where_clauses <- c(where_clauses, paste0("(", result_conditions, ")"))

    }    }

  )    

      filter_sql <- if (length(where_clauses) > 0) {

  # Function to get filtered results data      paste("AND", paste(where_clauses, collapse = " AND "))

  get_filtered_results <- function() {    } else {

    if (is.null(input$year_range)) return(NULL)      ""

        }

    # Build WHERE clause for filters    

    where_clauses <- c()    # Base query with year filter

        sql <- sprintf('

    if ('reasoning' %in% input$active_filters && length(input$reasoning_type) > 0 && !('all' %in% input$reasoning_type)) {      SELECT DISTINCT

      reasoning_conditions <- paste(sprintf("r.reasoning = '%s'", input$reasoning_type), collapse = " OR ")        p.petition_id,

      where_clauses <- c(where_clauses, paste0("(", reasoning_conditions, ")"))        p.year,

    }        p.county,

            p.state,

    if ('party' %in% input$active_filters) {        GROUP_CONCAT(DISTINCT r.reasoning) as reasoning_list,

      where_clauses <- c(where_clauses, sprintf("r.party_accused = '%s'", input$party_type))        GROUP_CONCAT(DISTINCT r.party_accused) as party_accused,

    }        p.court as court_name,

            GROUP_CONCAT(DISTINCT res.result) as result

    if ('court' %in% input$active_filters && length(input$court_type) > 0 && !('all' %in% input$court_type)) {      FROM Petitions p

      court_conditions <- paste(sprintf("p.court = '%s'", input$court_type), collapse = " OR ")      LEFT JOIN Petition_Reasoning_Lookup prl ON p.petition_id = prl.petition_id

      where_clauses <- c(where_clauses, paste0("(", court_conditions, ")"))      LEFT JOIN Reasoning r ON prl.reasoning_id = r.reasoning_id

    }      LEFT JOIN Result res ON p.petition_id = res.petition_id

      WHERE 1=1 

    if ('result' %in% input$active_filters && length(input$result_type) > 0 && !('all' %in% input$result_type)) {      AND CAST(COALESCE(p.year, "0") AS INTEGER) BETWEEN %d AND %d

      result_conditions <- paste(sprintf("res.result = '%s'", input$result_type), collapse = " OR ")      %s

      where_clauses <- c(where_clauses, paste0("(", result_conditions, ")"))      GROUP BY p.petition_id 

    }      ORDER BY p.year, p.state, p.county

        ', input$year_range[1], input$year_range[2], filter_sql)

    filter_sql <- if (length(where_clauses) > 0) {    

      paste("AND", paste(where_clauses, collapse = " AND "))    dbGetQuery(conn, sql)

    } else {  }

      ""  

    }  # Render filtered results table

      output$filtered_results_table <- renderDT({

    # Base query with year filter    data <- get_filtered_results()

    sql <- sprintf('    if (is.null(data)) return(NULL)

      SELECT DISTINCT    

        p.petition_id,    # Rename columns for display

        p.year,    colnames(data) <- c("Petition ID", "Year", "County", "State", "Reasoning", "Party Accused", "Court", "Result")

        p.county,    

        p.state,    datatable(data,

        GROUP_CONCAT(DISTINCT r.reasoning) as reasoning_list,              options = list(

        GROUP_CONCAT(DISTINCT r.party_accused) as party_accused,                pageLength = 25,

        p.court as court_name,                scrollX = TRUE,

        GROUP_CONCAT(DISTINCT res.result) as result                dom = 'Bfrtip'

      FROM Petitions p              ),

      LEFT JOIN Petition_Reasoning_Lookup prl ON p.petition_id = prl.petition_id              class = 'cell-border stripe',

      LEFT JOIN Reasoning r ON prl.reasoning_id = r.reasoning_id              style = 'bootstrap')

      LEFT JOIN Result res ON p.petition_id = res.petition_id  })

      WHERE 1=1   

      AND CAST(COALESCE(p.year, "0") AS INTEGER) BETWEEN %d AND %d  # Download handler for filtered results

      %s  output$download_filtered_csv <- downloadHandler(

      GROUP BY p.petition_id     filename = function() {

      ORDER BY p.year, p.state, p.county      filter_text <- paste0(input$active_filters, collapse = "_")

    ', input$year_range[1], input$year_range[2], filter_sql)      paste0('petitions_filtered_', filter_text, '_', Sys.Date(), '.csv')

        },

    dbGetQuery(conn, sql)    content = function(file) {

  }      write.csv(get_filtered_results(), file, row.names = FALSE)

      }

  # Render filtered results table  )

  output$filtered_results_table <- renderDT({}

    data <- get_filtered_results()

    if (is.null(data)) return(NULL)shinyApp(ui, server)
    
    # Rename columns for display
    colnames(data) <- c("Petition ID", "Year", "County", "State", "Reasoning", "Party Accused", "Court", "Result")
    
    datatable(data,
              options = list(
                pageLength = 25,
                scrollX = TRUE,
                dom = 'Bfrtip',
                className = 'cell-border stripe hover'
              ),
              style = 'bootstrap4')
  })
  
  # Download handler for filtered results
  output$download_filtered_csv <- downloadHandler(
    filename = function() {
      filter_text <- paste0(input$active_filters, collapse = "_")
      paste0('petitions_filtered_', filter_text, '_', Sys.Date(), '.csv')
    },
    content = function(file) {
      write.csv(get_filtered_results(), file, row.names = FALSE)
    }
  )
}

# Run the app
shinyApp(ui = ui, server = server)